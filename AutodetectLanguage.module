<?php

/**
 * Autodetect Language
 *
 * This module tries to find a best match between a user's language
 * and one of the installed site languages. 
 *
 * Sets two session variables:
 * $session->languageAlreadyDetected (true|false)
 * $session->languageDetectionFailed (returns true if fell back to default);
 */
class AutodetectLanguage extends WireData implements Module, ConfigurableModule {
    
    /**
     * Return information about this module (required)
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => "Autodetect Language",
            'summary' => "Finds a best match between visitor's language and redirects.",
            'author' => 'Pierre-Luc Auclair',
            'version' => 103,
            'singular' => true,
            'autoload' => true,
        ); 
    }

    public function init() {
        wire()->addHookBefore("Page::render", $this, "detectLanguageRedirect");
    }
    
    public function __construct() {
        $this->defaultSiteLanguageCode = "";
        $this->onlyOnHomepage = "";
	$this->noDetectGetParam = "";
        $this->noBackend = 1;
    }

    public function detectLanguageRedirect(HookEvent $event) {
        $page = $event->object;
        if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])
            AND ($page->template != "admin" OR $this->noBackend == false)) {

            // defaults to "en" if unset
            if (empty($this->defaultSiteLanguageCode)) {
                $this->defaultSiteLanguageCode = "en";
            }

            $run = false;

            if ($this->session->languageAlreadyDetected === null) {
                if ($this->onlyOnHomepage == false) {
                    $run = true;
                } elseif ($this->onlyOnHomepage == true AND $page->id == 1) {
                    $run = true;
                } else {
                    $run = false;
                    $this->session->languageAlreadyDetected = true;
                }
            }

            if ($run === true) {
                // Initalize this session variable. Lets you know when
                // the language detection failed and fell back to "default"
                $this->session->languageDetectionFailed = true;

                $acceptLanguages = explode(";", $_SERVER['HTTP_ACCEPT_LANGUAGE']);

                function cleanAcceptLanguages($string)
                {
                    $string = $string;
                    $pattern = '/^(q=[0-9\.]+\,?)([\D\d]*)$/i';
                    // get rid of any q=x.x, we only want the language names
                    $replacement = '$2';
                    return strtolower(preg_replace($pattern, $replacement, $string));
                }

                // strip q=x.x
                $acceptLanguages = array_map("cleanAcceptLanguages", $acceptLanguages);
                // remove empty strings
                $acceptLanguages = array_filter($acceptLanguages);
                // split any string that looks like "en,en-us" in two
                foreach ($acceptLanguages as $key => $value) {
                    $pattern = "/^(.+),(.+)$/";
                    if (preg_match($pattern, $value)) {
                        $acceptLanguages[$key] = preg_replace($pattern, "$1", $value);
                        array_splice($acceptLanguages, $key + 1, 0, preg_replace($pattern, "$2", $value));
                    }
                }

                // make lowercase array from site languages
                $siteLanguages = array();
                foreach (wire("languages") as $language) {
                    $languageName = strtolower($language->name);
                    array_push($siteLanguages, $languageName);
                }

                // remove first item, should always be "default",
                // don't wanna match against that
                $defaultLanguage = array_shift($siteLanguages);

                // add default language code to list
                array_push($siteLanguages, strtolower($this->defaultSiteLanguageCode));
                // then track where to put it, if we need to fallback to default
                $defaultLanguagePosition = sizeof($siteLanguages) - 1;

                // keep track of match, if any
                $matchedLanguage = "";

                // first try full match (fr-fr)
                foreach ($acceptLanguages as $accept) {
                    if (array_search($accept, $siteLanguages) !== false) {
                        $matchedLanguage = $accept;
                        $languageDetectionFailed = false;
                        break; // at first match
                    }
                }

                // if this didn't work, try partial match (fr)
                if (empty($matchedLanguage)) {
                    $substr = function ($element) {
                        return substr($element, 0, 2);
                    };

                    $acceptLanguages = array_map($substr, $acceptLanguages);
                    $siteLanguagesShort = array_map($substr, $siteLanguages);

                    foreach ($acceptLanguages as $accept) {
                        if (array_search($accept, $siteLanguagesShort) !== false) {
                            $matchedLanguage = $accept;
                            $languageDetectionFailed = false;
                            break; // at first match
                        }
                    }
                }

                // if no match between HTTP_ACCEPT_LANGUAGE and site languages
                if (empty($matchedLanguage)) {
                    $matchedLanguage = $defaultLanguage;
                } elseif (array_search($matchedLanguage, $siteLanguages) == $defaultLanguagePosition) {
                    $matchedLanguage = $defaultLanguage;
                }

                // Set some session variables then redirect
                $this->session->languageAlreadyDetected = true;
                if (wire('user')->language->name != $matchedLanguage AND !isset(wire('input')->get->{$this->noDetectGetParam})) {
                    $this->session->redirect($page->localUrl($matchedLanguage), false);
                }
            }
        }
    }

    public static function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper(); 
 
        // Option to set the default language code
        $field = wire('modules')->get('InputfieldText');
        $field->name = 'defaultSiteLanguageCode';
        $field->label = __("Default system language code");
        $field->description = __("This setting informs the module what the language code is for the \"default\" system language. You should use a [BCP 47 formatted](http://www.rfc-editor.org/rfc/bcp/bcp47.txt) language code. These are the typical **us** or **en-US** you commonly see. Important note: all your language name fields in Setup > Languages must also conform to this format. **If not set, will default back to \"en\"**.");
        if(isset($data['defaultSiteLanguageCode'])) $field->value = $data['defaultSiteLanguageCode'];
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldCheckbox');
        $field->name ='onlyOnHomepage';
        $field->label = 'Only detect language on homepage';
        $field->attr('value', $data['onlyOnHomepage'] ? $data['onlyOnHomepage'] : 0 );
        $field->attr('checked', $data['onlyOnHomepage'] === 1 ? 'checked' : '' );
        $inputfields->add($field);

	$field = wire('modules')->get('InputfieldText');
	$field->name = 'noDetectGetParam';
	$field->label = __("Do not detect language if GET parameter is set");
	$field->description = __("If this GET parameter is set, AutodetectLanguage will not try to detect the user's language. This might be helpful for newsletters or other things. For example, if you were to set this setting to \"nodetect\" and the page would be accessed via *http://example.com/?nodetect*, redirection to the preferred user's language will not happen.");
	if(isset($data['noDetectGetParam'])) $field->value = $data['noDetectGetParam'];
	$inputfields->add($field);

        $field = wire('modules')->get('InputfieldCheckbox');
        $field->name ='noBackend';
        $field->label = 'Only detect language on frontend';
        $field->attr('value', $data['noBackend'] ? $data['noBackend'] : 0 );
        $field->attr('checked', $data['noBackend'] === 1 ? 'checked' : '' );
        $inputfields->add($field);

        return $inputfields;
    }
}
